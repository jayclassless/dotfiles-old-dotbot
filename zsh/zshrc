# Enable Powerlevel10k instant prompt.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Utilities
shell_is_linux () { [[ "$OSTYPE" == *'linux'* ]] ; }
shell_is_osx () { [[ "$OSTYPE" == *'darwin'* ]] ; }

# History settings
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=500
setopt APPEND_HISTORY EXTENDED_HISTORY HIST_EXPIRE_DUPS_FIRST HIST_IGNORE_DUPS
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '^[[A'  up-line-or-beginning-search
bindkey '^[OA'  up-line-or-beginning-search
bindkey '^[[B'  down-line-or-beginning-search
bindkey '^[OB'  down-line-or-beginning-search

# Environment variables
export EDITOR=vim
export PAGER=less
export PYTHONSTARTUP=$HOME/.python/startup
export PIP_REQUIRE_VIRTUALENV=true

unsetopt beep
bindkey -e

# Paths
if [ -d $HOME/bin ]; then
    export PATH=$HOME/bin:$PATH
fi

# Completions
if type brew &>/dev/null; then
    FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi
autoload -Uz compinit
compinit -u

# Color support
CLICOLOR=1
if shell_is_osx; then
    alias ls='ls -G'
else
    alias ls='ls --color=auto'
fi
alias grep='grep --color=auto'

# Prompt
source ~/.zsh/powerlevel10k/powerlevel10k.zsh-theme
source ~/.zsh/p10k.zsh

# Give a heads up if there are screens running.
if type screen &>/dev/null; then
    sc=`screen -list | grep "No Sockets"`
    if [ -z "$sc" ]; then
        screen -list
    fi
    unset sc
fi
# Give a heads up if there are tmux sessions running.
if type tmux &>/dev/null; then
    tmux list-sessions 2>/dev/null
fi

# Keep a predictably-named alias available for our SSH agent
SOCK="/tmp/ssh-agent-$USER-screen"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]; then
    rm -f $SOCK
    ln -sf $SSH_AUTH_SOCK $SOCK
    export SSH_AUTH_SOCK=$SOCK
fi

# Aliases.
alias l='ls -laF'
alias lw='ls -CaF'
alias gpip='PIP_REQUIRE_VIRTUALENV="" pip "$@"'
kctx () {
    kubectl config use-context $1 && kubectl config set-context $1 --namespace=$2
}
myip () {
    dig @ns1.google.com TXT o-o.myaddr.l.google.com +short
}

# Enable pyenv if it's around.
if type pyenv &>/dev/null; then
    export PYENV_ROOT=/usr/local/var/pyenv
    export PATH=$PYENV_ROOT/bin:$PATH
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi

# Enable direnv if it's around.
if type direnv &>/dev/null; then
    eval "$(direnv hook zsh)"
fi

# Bring in a local zsh configuration.
if [ -f $HOME/.zshrc_local ]; then
    . $HOME/.zshrc_local
fi

